# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "app".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose


version: "3.10"

services:
  my_cnn_model:
    image: tensorflow/serving
    container_name: my_cnn_model
    ports:
      - "8501:8501"
    volumes:
      - ./models:/models
    environment:
      - MODEL_NAME=my_cnn_model

  fastapi_app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: fastapi_app
    ports:
      - "8000:8000"
    depends_on:
      - my_cnn_model
    environment:
      - TF_MODEL_URL=http://my_cnn_model:8501/v1/models/my_cnn_model:predict




#version: "3.10"
#services:
#  tensorflow_serving:
#    image: tensorflow/serving
#    container_name: tensorflow_serving
#    ports:
#      - "8501:8501"
#    volumes:
#      - ./models:/models
#    environment:
#      - MODEL_NAME=my_cnn_model
#
#  fastapi_service:
#    build:
#      context: .
#    container_name: fastapi_service
#    ports:
#      - "8000:8000"
#    depends_on:
#      - tensorflow_serving


#version: "3.10"
#services:
#  my_cnn_model:
#    image: tensorflow/serving
#    container_name: my_cnn_model
#    ports:
#      - "8501:8501"
#    volumes:
#      - ./models:/models
#    environment:
#      - MODEL_NAME=my_cnn_model
#
#  fastapi_app:
#    build:
#      context: .
#      dockerfile: Dockerfile
#    container_name: fastapi_app
#    ports:
#      - "8000:8000"
#    volumes:
#      - .:/app
#    depends_on:
#      - my_cnn_model



#version: "3.10"
#services:
#  tensorflow_serving:
#    image: tensorflow/serving
#    container_name: my_cnn_model
#    ports:
#      - "8501:8501"
#    volumes:
#      - ./models:/models
#    environment:
#      - MODEL_NAME=my_cnn_model
#  
#  fastapi_app:
#    build: .
#    container_name: fastapi_app
#    ports:
#      - "8000:8000"
#    depends_on:
#      - tensorflow_serving
#    environment:
#      - MODEL_URL=http://tensorflow_serving:8501/v1/models/my_cnn_model:predict


#version: "3.10"
#services:
#  my_cnn_model:
#    image: tensorflow/serving
#    container_name: my_cnn_model
#    ports:
#      - "8501:8501"
#    volumes:
#      - ./models:/models
#    environment:
#      - MODEL_NAME=my_cnn_model


#version: '3'
#services:
#  my_cnn_model:
#    image: tensorflow/serving
#    ports:
#      - "8501:8501"
#    volumes:
#      - ./models:/models
#    environment:
#      - MODEL_NAME=my_cnn_model


#version: '3.10'
#services:
#  tf_serving:
#    image: tensorflow/serving
#    ports:
#      - "8501:8501"
#    volumes:
#      - ./models:/models
#      - ./config.yaml:/models/config.yaml
#    environment:
#      - MODEL_NAME=my_cnn_model

#  fastapi:
#    build: .
#    ports:
#      - "8000:8000"

      
#services:
  #app:
    #build:
      #context: .
      #target: final
    # If your application exposes a port, uncomment the following lines and change
    # the port numbers as needed. The first number is the host port and the second
    # is the port inside the container.
    # ports:
    #   - 8080:8080

    # The commented out section below is an example of how to define a PostgreSQL
    # database that your application can use. `depends_on` tells Docker Compose to
    # start the database before your application. The `db-data` volume persists the
    # database data between container restarts. The `db-password` secret is used
    # to set the database password. You must create `db/password.txt` and add
    # a password of your choosing to it before running `docker compose up`.
    #     depends_on:
    #       db:
    #         condition: service_healthy
    #   db:
    #     image: postgres
    #     restart: always
    #     user: postgres
    #     secrets:
    #       - db-password
    #     volumes:
    #       - db-data:/var/lib/postgresql/data
    #     environment:
    #       - POSTGRES_DB=example
    #       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
    #     expose:
    #       - 5432
    #     healthcheck:
    #       test: [ "CMD", "pg_isready" ]
    #       interval: 10s
    #       timeout: 5s
    #       retries: 5
    # volumes:
    #   db-data:
    # secrets:
    #   db-password:
    #     file: db/password.txt

    
